#
# .travis.yml contains YAML-formatted (http://www.yaml.org/) instructions
# for building the rebol-server .APK for continuous integration via Travis CI:
#
# http://docs.travis-ci.com/
#
# This file should follow the conventions of the Ren-C project, so see the
# notes in its `.travis.yml` file on indentation and other conventions:
#
# https://github.com/metaeducation/ren-c/blob/master/.travis.yml
#

notifications:
  email: false  # committers are keeping an eye on failures, supposedly!


# Travis defaults to 50; not needed, use 3 (just 1 affects queue notification)
#
# https://docs.travis-ci.com/user/customizing-the-build/#git-clone-depth
#
git:
  depth: 3


# Each configured travis instance has its own customized environment variables
# to give it unique behavior.  But there are also global environment keys,
# available to the overall Travis process itself (e.g. deployment)
#
# https://docs.travis-ci.com/user/environment-variables/#Global-Variables
#
env:
  global:
    # AWS_ACCESS_KEY_ID
    - secure: 'dncgHdqloR7h0nRGuEAwbxsnNziUix9BpAaNY9m7Y0se/TeGMdcSpGD0xkfCfUVnJjLWRg4/pMf74IbiohHK1GapZJDxbr/cIqIgh8GeQe2rGXOvZCT5EjgTql4AVYdVt85jjKaWJzW7i83k768TjO8L1fotgDPyZ7LUgDqomyTpuCu+QKxAxw+BEvkXZvka76VH0EtlEd/NHXsngYf1G0gkAhhdwN8xEQ82n2++xXOIJQAZzl+jIUceNOzIwVFRzXAO7rvhx2EzZY+IMpEXTE+WHh1ASihTK9QJwSkxohNS3xk2k/gJUSt+VZoM3Iwau0scxkil65O5KwAX24M9HJQBxungMDru7bBSk5bgconGEzShWa2RBKJexbxVLFU7uN5sB3GXD+uLXwhmzwND7fAscchJpYfM5z85R1/WwIH7Bx9vEVRUyMSdD78p6iIlr1onSZh4+RgutjCd2vF3BHFN1/sOUulAYEf8bpnOQ+KRx2mYKZk87PG3hVGlEAyXC6UsfJi9iVdwSC4eD2FBGp2/dNh316y4PDONvso6a94uEMLHrGlvUs1SeULDu/EMIY5ZPjh4JTYzwthAi0kZVz+cWAySPl26wV+IKsAtPU1DDej7xQ6hE7fCPBQysV9X4p9Da7UjIgFoxi5Q6JV1//jxQuWcALFoqKUAdNeWquA='
    # AWS_SECRET_ACCESS_KEY
    - secure: 'kFxV7VP28iis672zStvuq7YLXqOIwAmgUF7x4/LxxivvvM/Yw4kjrAXPu0NVAIYryIm5UVBQXU20ynID03yFfQNiKn4v1zusGS6qW1pI0XLcg6gM4mU+t6bRoZVesXpuJJQbqsKtt8XLopHcqxJL9Qrq1hXb9wP5xkel262wYYJdvoPXzefRqev6harB3MxdNHoWak0H92xttx/k5N0zBQ6x303USnOaIFsqgm1xYqSEE+bCO7mq4W19q8fc8NCDh00AdnSofs67enOIZ6ggW/wE8U09DWbOD5M4HIYrjmRmnucg55+aJH5rP0r8/dBWVegovVSq5aXruf+bF+/26QigkbS5IOX6gfNQeruKzNmZMMK0Vv1390xatQYT3+4KHArzT/cRFTjIAceRvx8kCs47XXemzcQtiobHcL9NfGADQR0sZMEOL25ZtAX7NMySSNkkPPnECTFBwB86gN3x23mzein9oKfCLTxt2Gjk0O02/qabNV5nBKAjgJCm9hKmMTvA5ZL/5AY+uOHszCc2Y4eIqBeVRSOR4vfWlXwlB76eY4FsBJdvc+FU338pMeJSqeppeomz8LuKRh43K/L3UKnnMe+8ErOPIUg/DVKGqjbq0wxsqB0z1dmM8PFSytTHbByIfw4grAHRMi8UuC0npyB5ozrDLofssJ5BRr6PHr4='

    - AWS_S3_BUCKET_NAME: 'metaeducation'


# All Travis instances in the following "matrix" will run the same `script:`
# code (found later on in the file).  However, each instance has environment
# variables which can guide that script to behave differently.
#
# Since a prebuilt Rebol is downloaded as part of this process, there is no
# current need for any additional C cross-compilation on ARM to make more
# binaries for the bundle.  However, this configures an environment so that we
# *could* do ARM compilation if it were necessary (to build any added extension
# or extra material intended to be executed in the package.)
#
matrix:
  include:
    #
    # [1] 
    #
    - os: linux
      dist: trusty
      sudo: false  # force new container-based infrastructure
      language: android
      env:
        - NUMBER=1
      addons:
        apt:
          packages:


# The install step occurs before the `script:` step runs.  The language that
# was specified in the `matrix:` entry for each instance will guide certain
# default tools that will be installed.  But you can add custom steps:
#
# https://docs.travis-ci.com/user/customizing-the-build#Customizing-the-Installation-Step
#
# What we do is install the AWS command line tool so we can upload the products
# and control their MIME types.
#
install:
  - |
    # Check PIP installation
    #
    if pip --version; then PIP=pip; fi
    if pip2 --version; then PIP=pip2; fi
    if pip3 --version; then PIP=pip3; fi
    if $PIP --version
    then echo PIP=$PIP
    else echo "!!! PIP NOT FOUND !!!"; exit 1
    fi

  - |
    # Install the AWS command-line tool for uploading to s3 (which we use
    # instead of Travis's `deploy`)
    if $PIP install awscli --upgrade --user
    then echo AWS installed
    else
        echo "!!! AWS not installed !!!"
        exit 1
    fi

    AWS="$(find /Users/travis/Library/Python/ -name aws)"
    if aws --version; then AWS=aws;fi
    if $AWS --version
    then echo AWS=$AWS
    else echo "!!! AWS NOT FOUND !!!"; exit 1
    fi

script:
    - |
      # whatever home directory Travis put us in, build there
      TOP_DIR="$(pwd)"  # https://stackoverflow.com/a/10795195/

    - |
      "${CROSS_PREFIX}gcc" --version  # Output version of gcc for the log

    # Ask for as many parallel builds as the virtual host supports
    - |
      if [[ $TRAVIS_OS_NAME = linux ]]; then
        export MAKE_JOBS="$(nproc)"
      fi

    # Native Development Kit (NDK) is for C/C++ cross-compilation to Android.
    # https://developer.android.com/ndk
    #
    # This is not needed here, but could be if we were doing more building of
    # C code beyond just embedding the already-built Rebol.
    #
    #- |
    #  if [[ $OS_ID = 0.13.2 ]]; then
    #      if [[ $(uname -m) = x86_64 ]]; then
    #          wget https://github.com/giuliolunati/android-travis/releases/download/v1.0.0/android-ndk-r13.tgz
    #          export ANDROID_NDK="${TOP_DIR}/android-ndk-r13"
    #      else
    #          exit 1
    #      fi
    #      tar zxf android-ndk-r13.tgz
    #      echo "$(pwd)"
    #      ls -dl "$(pwd)/android-ndk-r13"
    #      export CROSS_PREFIX="${ANDROID_NDK}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-"
    #      export SYSROOT="${ANDROID_NDK}/platforms/android-19/arch-arm"
    #  fi

    # Grab the abbreviated and full git commit ID into environment variables.
    # The full commit is passed to make to build into the binary, and the
    # abbreviated commit is used to name the executable.
    #
    # http://stackoverflow.com/a/42549385/211160
    #
    # !!! Written this way, this will be the git commit of the rebol-server
    # project, not the commit ID of the embedded Rebol executable.  It is
    # probably the case that the hash of the embedded Rebol makes more sense
    # to use, but this .travis.yml is a work in progress.
    #
    - GIT_COMMIT="$(git show --format="%H" --no-patch)"
    - echo "$GIT_COMMIT"
    - GIT_COMMIT_SHORT="$(git show --format="%h" --no-patch)"
    - echo "$GIT_COMMIT_SHORT"

# BUILD STEP
#
# !!! We technically would like to build variations of the .APK for various
# Android versions.  It appears not possible to make a "universal APK", so we
# would need to call the bash script multiple times, and upload all the build
# products to Amazon AWS.
#
# https://github.com/metaeducation/rebol-server/issues/3

    - |
      PATH=/usr/local/android-sdk/build-tools/25.0.2:$PATH
      bash build.bash

# DEPLOY STEP:

    # check what is left in the build directory...
    - ls

    # Name the executable based on the abbreviated commit, whether it is a
    # debug or release build, and if it was built using C++ or not.  Note that
    # the C++ debug builds have additional runtime checks in the debug
    # build...though there should not be any impact on the release build.
    # (Though there may be additional DLL dependencies regardless.)
    #
    # !!! All Ren-C stakeholders should be using debug builds at this time.
    #
    # Note: -z tests if a variable is undefined
    #
    - NEW_NAME="rebol-server-${GIT_COMMIT_SHORT}"
    - if [[ $DEBUG != none ]]; then NEW_NAME+='-debug'; fi
    - NEW_NAME+='.apk'
    - echo "$NEW_NAME"

    # Move the executable into a directory based on its OS_ID platform.
    # This is because the deploy step is run for each OS and would
    # otherwise overwrite executables in the same location.
    #
    # Note: [[-e]] tests for "existence"
    #
    - |
      UPLOAD_DIR=rebol-server
      mkdir -p $UPLOAD_DIR
      mv bin/rebol-server.apk "$UPLOAD_DIR/${NEW_NAME}"
      ls
    
    # Web Browsers are picky about the MIME type of some files.  We want to
    # make sure that the right type is chosen:
    #
    # https://stackoverflow.com/a/11643041/211160
    #
    # The `deploy` upload mechanic in Travis has no way to specify this
    # property, so we use the command-line `aws` tool to do the uploads.
    #
    # We also want to control the *order* in which files are uploaded, which
    # Travis's deploy does not support.  For how the keys are kept secure
    # despite publishing this upload script, see:
    #
    # http://stackoverflow.com/a/42547424/211160
    #
    - |
      if [[ ${TRAVIS_BRANCH} != "master" || ${TRAVIS_PULL_REQUEST} != "false" ]]
      then exit 0 # skip the deploy step
      fi

      function upload {
        # Note that `;;` is specific to bash's `case`, unrelated to `;`
        case $1 in
          *.apk) OPT_TYPE="--content-type application/vnd.android.package-archive" ;;
          *) OPT_TYPE="" ;;
        esac
        rm -f _
        $AWS s3 cp $1 s3://${AWS_S3_BUCKET_NAME}/travis-builds/$1 $OPT_TYPE
        $AWS s3 cp s3://${AWS_S3_BUCKET_NAME}/travis-builds/$1 _
        if cmp $1 _
        then
          echo === UPLOADED $1 ===
        else
          echo === UPLOAD $1 FAILED ===
          exit 1
        fi
      }

      for i in $UPLOAD_DIR/*; do 
        echo $i
        upload $i;
      done

      echo "UPLOAD DONE."

      # !!! This is where we would put any finalization code for the upload.
      # Here's what Ren-C's finalization does, to provide the hash of the
      # latest executable for each version that successfully uploaded.
      #
      # echo -n "${GIT_COMMIT_SHORT}" > ${OS_ID}/last-deploy.short-hash
      # upload ${OS_ID}/last-deploy.short-hash

# vim: set et sw=2:
